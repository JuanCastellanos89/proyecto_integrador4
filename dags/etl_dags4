from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from src.transform import run_queries

default_args = {
    "owner": "airflow",
    "start_date": datetime(2025, 4, 1),
    "retries": 1,
    "retry_delay": timedelta(minutes=2),
}

with DAG(
    dag_id="etl_proyecto",
    default_args=default_args,
    schedule_interval="@daily",
    catchup=False,
) as dag:
    def run_extract():
        import sys
        sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
        from src.extract import extract
        from src import config

        csv_folder = config.DATASET_ROOT_PATH
        public_holidays_url = config.PUBLIC_HOLIDAYS_URL
        csv_table_mapping = config.get_csv_to_table_mapping()
        return extract(csv_folder, csv_table_mapping, public_holidays_url)

    def run_load(ti):
        import sys
        sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
        from src.load import load
        from src import config
        from sqlalchemy import create_engine
        from pathlib import Path

        # Obtener datos de la tarea anterior
        csv_dataframes = ti.xcom_pull(task_ids="extract_task")

        # Configurar base de datos
        Path(config.SQLITE_BD_ABSOLUTE_PATH).touch()
        ENGINE = create_engine(
            rf"sqlite:///{config.SQLITE_BD_ABSOLUTE_PATH}", echo=False
        )

        # Cargar datos
        load(data_frames=csv_dataframes, database=ENGINE)
    
    def transform_task():
        from pathlib import Path
        from src import config
        from sqlalchemy import create_engine
        import sys
        sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
        from src.transform import run_queries
        Path(config.SQLITE_BD_ABSOLUTE_PATH).touch()
        ENGINE = create_engine(
            rf"sqlite:///{config.SQLITE_BD_ABSOLUTE_PATH}", echo=False
        )

        run_queries(ENGINE)
    

    extract_task = PythonOperator(
        task_id="extract_task",
        python_callable=run_extract,
    )

    load_task = PythonOperator(
        task_id="load_task",
        python_callable=run_load,
    )
    

    transform_task = PythonOperator(
        task_id="transform_data",
        python_callable=transform_task
    )

extract_task >> load_task >> transform_task
